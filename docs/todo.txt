
1) middleware - validação caso um json inválido foi enviado
   https://www.udemy.com/course/tdd-com-mango/learn/lecture/17957736#questions/10125014

   app.use((err, req, res, next) => {
     if (err) {
     console.log('Invalid Request data')
     res.send('Invalid Request data')
     } else {
     next()
     }
   })

2) refactor folders
   main/factories/controllers/login  ->  main/factories/controllers/LOGIN/login
   main/factories/controllers/signup ->  main/factories/controllers/LOGIN/signup

3) await new Promise(....)
   Seção 2: Bônus, Aula 07 - Problema identificado em biblioteca
   "eslint-config-standard-with-typescript": "^15.0.1",
   mudar para
   "eslint-config-standard-with-typescript": "^11.0.1",

   complementa automaticamente await new Promise(... quando espera que seja apenas new Promise(...

4) src/infra/db/mongodb/survey-result/survey-result-mongo-repository.ts

   Ao invés de gravar formato string na coluna surveyId da coleção surveyresult, gravar como objectId
   
   Antes
     secao22-aula78-01-objectid-vscode-grava-string.png
     secao22-aula78-02-objectid-mongodb-grava-string.png

   Depois:
     secao22-aula78-03-objectid-vscode-grava-objectid.png
     secao22-aula78-04-objectid-mongodb-grava-objectid.png

 5) Checar se o surveyId (id) informado na URL /surveys/{surveyId}/results é valido.
    Simplesmente retorna 500. Pois ao converter um id inválido,
    exemplo: 5eb425698eaa2a992d43dc26x para new ObjectId(), dá erro
    
    Deveria testar o id em

      presentation/controllers/survey-result/save-survey-result/save-survery-result-controller.ts
      c/ teste: presentation/controllers/survey-result/save-survey-result/save-survery-result-controller.spec.ts

          async handle (httpRequest: HttpRequest): Promise<HttpResponse> {
            try {
              const { surveyId } = httpRequest.params
              const { answer } = httpRequest.body
              const { accountId } = httpRequest
        --->  *** if (surveyId.match(id.match(/^[0-9a-fA-F]{24}$/))) { ...
        ///// ou
        --->  *** if (ObjectID.isValid(surveyId)) { ...
              const survey = await this.loadSurveyById.loadById(surveyId)
              if (survey) {
      
      ou
      
      infra/db/mongodb/survey/survey-mongo-repository
      c/ teste: infra/db/mongodb/survey/survey-mongo-repository.spec.ts

           async loadById (id: string): Promise<SurveyModel> {
             const surveyCollection = await MongoHelper.getCollection('surveys')
             const survey: SurveyModel = await surveyCollection.findOne({ _id: new ObjectId(id) })
             return survey && MongoHelper.map(survey)
           }

    Observação:
      http://localhost:5050/api/surveys/5eb425698eaa2a992d43dc26z/results
      se validar esse caso do id, verificar se poderá retornar como erro de BadRequest,
      pois só retorna Forbidden/Server Error

  6)  Seção 25: LoadsurveyResult API, Aula 94 - Correção no Aggregation do resultado da enquete
      query luizhp - loadBySurveyIdLuizHP - infra/db/mongodb/survey-result/survey-result-mongo-repository.ts

      db.surveys.aggregate([
        {
          $match: {
            _id: ObjectId("5ebca4be20099e36eebdb534")
          }
        },
        {
          $unwind: {
            path: "$answers"
          }
        },
        {
          $lookup: {
            from: 'surveyResults',
            let: {
              id: "$_id",
              answer: "$answers.answer"
            },
            pipeline: [
              {
                $match: {
                  $expr: {
                    $and: [
                      {$eq: ["$surveyId","$$id"]},
                      {$eq: ["$answer","$$answer"]},
                    ]
                  }
                }
              }
            ],
            as: 'results'
          }
        },
        {
          $group: {
            _id: 0,
            data: {$push: "$$ROOT"},
            total: {
              $sum: {$size: "$results"}
            }
          }
        },
        {
          $unwind: {path: "$data"}
        },
        {
          $addFields: {
            count: {$size: "$data.results"},
            percent: {
              $cond: {
                if: {$eq: ["$total",0]},
                then: 0,
                else: {
                  $multiply: [{$divide: [{$size: "$data.results"},"$total"]},100]
                }
              }
            }
          }
        },
        {
          $sort: {'count': -1}
        },
        {
          $project: {
            _id: 0,
            surveyId: "$data._id",
            question: "$data.question",
            date: "$data.date",
            answers: {
              image: "$data.answers.image",
              answer: "$data.answers.answer",
              count: "$count",
              percent: "$percent"
            }
          }
        },
        {
          $group: {
            _id: {
              surveyId: "$surveyId",
              question: "$question",
              date: "$date"
            },
            answers: {
              $push: "$answers"
            }
          }
        },
        {
          $project: {
            _id: 0,
            surveyId: "$_id.surveyId",
            question: "$_id.question",
            date: "$_id.date",
            answers: "$answers"
          }
        }
      ])

      -- ** --

      async loadBySurveyIdLuizHP (surveyId: string): Promise<SurveyResultModel> {
        const surveysCollection = await MongoHelper.getCollection('surveys')
        const query = new QueryBuilder()
          .match({
            _id: new ObjectId(surveyId)
          })
          .unwind({
            path: '$answers'
          })
          .lookup({
            from: 'surveyResults',
            let: {
              id: '$_id',
              answer: '$answers.answer'
            },
            pipeline: [{
              $match: {
                $expr: {
                  $and: [
                    { $eq: ['$surveyId', '$$id'] },
                    { $eq: ['$answer', '$$answer'] }
                  ]
                }
              }
            }],
            as: 'results'
          })
          .group({
            _id: 0,
            data: {
              $push: '$$ROOT'
            },
            total: {
              $sum: {
                $size: '$results'
              }
            }
          })
          .unwind({
            path: '$data'
          })
          .addFields({
            count: {
              $size: '$data.results'
            },
            percent: {
              $cond: {
                if: {
                  $eq: [
                    "$total",
                    0
                  ]
                }, then: 0, else: {
                  $multiply: [
                    {
                      $divide: [
                        {
                          $size: "$data.results"
                        },
                        "$total"
                      ]
                    },
                    100
                  ]
                }
              }
            }
          })
          .sort({ count: -1 })
          .project({
            _id: 0,
            surveyId: '$data._id',
            question: '$data.question',
            date: '$data.date',
            answers: {
              image: '$data.answers.image',
              answer: '$data.answers.answer',
              count: '$count',
              percent: '$percent'
            }
          })
          .group({
            _id: {
              surveyId: '$surveyId',
              question: '$question',
              date: '$date'
            },
            answers: {
              $push: '$answers'
            }
          })
          .project({
            _id: 0,
            surveyId: '$_id.surveyId',
            question: '$_id.question',
            date: '$_id.date',
            answers: '$answers'
    
          })
          .build()
        const surveyResult = await surveysCollection.aggregate(query).toArray()
        return surveyResult?.length ? surveyResult[0] : null
      }