
npm init -y
-y => configurações default

1) Padronização de commits:

https://www.conventionalcommits.org
A especificação do Conventional Commits é uma convenção simples para utilizar nas mensagens de commit.
Ela define um conjunto de regras para criar um histórico de commit explícito, o que facilita a criação de ferramentas automatizadas.

https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines
We have very precise rules over how our git commit messages can be formatted.
This leads to more readable messages that are easy to follow when looking through the project history.
But also, we use the git commit messages to generate the Angular change log.

Biblioteca para forçar que a convenção do texto no commit seja seguido:
   https://www.npmjs.com/package/git-commit-msg-linter
   A git "commit-msg" hook for linting your git commit message against the Angular Commit Message Guidelines.
   As a hook it will run at every commiting to make sure that the message to commit is valid against the conventions. 

   Inserir biblioteca:
      npm i -D git-commit-msg-linter

2) typescript @types/node

   Inserir biblioteca:
      npm i -D typescript @types/node

3) criar tsconfig.json

   criar automaticamente com tsc --init
   "outDir": "./dist"
   "module": "commonjs"
   "target": "es2020"
   "esModuleInterop": true
   "allowJs": true

   Suporte do node para recursos de cada versão do ECMASCRIPT (vide target)
   https://node.green/

4) linter

   Apresentação da página - Definição de padrões JS
   https://standardjs.com/

   https://github.com/standard/eslint-config-standard-with-typescript
   https://www.npmjs.com/package/eslint-config-standard-with-typescript

   Instalar plugins typescript+eslint+standard:
   npm install --save-dev eslint@6 eslint-plugin-standard@4 eslint-plugin-promise@4 eslint-plugin-import@2 eslint-plugin-node@11 @typescript-eslint/eslint-plugin@2 eslint-config-standard-with-typescript

   habilitar no VSCODE: VS Code ESLint extension
   https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
   (plugin do standardjs serve para projetos somente em js - caso tenha plugin standardjs desabilitar e deixar somente o eslint)

   criar o arquivo .eslintrc.json na pasta raiz e adicionar:
   {
       "extends": "standard-with-typescript",
       "parserOptions": {
           "project": "./tsconfig.json"
       }
   }

   Para testar se está ativo a checagem do eslint,
   foi criado um arquivo temporário
   test.ts com o seguinte conteúdo:
   
   function teste() {
       return 1;
   }

   e depois de alguns ajustes acabou se tornando:
   
   function teste (): number {
     return 1
   }

   teste()

   provando assim que a checagem estava ativa

   . Criado o arquivo .eslintignore com as pastas para que o eslint ignore
     docs
     node_modules
     dist

-------------------------------------------------
-- Validação de modificações antes de commit/push
   lint-staged + husky

5) lint-staged
   Run linters against staged git files and don't let 💩 slip into your code base!
   https://www.npmjs.com/package/lint-staged

   Roda junto com o husky para acelerar o processo de validação.
   Permite que rode scripts somente para arquivos que estão na área de stage do git
   (somente os que foram modificados e passaram pelo git add)
   Para não ter que rodar em todos os arquivos do projeto. Somente os que foram modificados e estão na stage.

   Instalar:
   npm i -D lint-staged

   Configurar criando arquivo na pasta raiz .lintstagedrc.json e adicionar:
   {
     "*.ts": [
       "eslint 'src/**' --fix",
       "npm run test:staged" (>> adicionar depois de instalar o jest)
     ]
   }

6) husky
   Husky can prevent bad git commit, git push and more 🐶 woof!
   https://www.npmjs.com/package/husky

   Previne que commits ou pushs sejam feitos ao executar comandos de validação do código.

   Instalar:
   npm i -D husky

   Configurar criando arquivo na raiz .huskyrc.json e adicionar:
   {
     "hooks": {
       "pre-commit": "lint-staged"
     }
   }

-------------------------------------------------
7) Jest
   Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
   Teste unitário

   https://www.npmjs.com/package/jest
   https://jestjs.io/

   Instalar:
   npm i -D jest @types/jest ts-jest

   Setup (no shell):
   > sudo npm i -g jest
   > jest --init
     ✔ Would you like to use Jest when running "test" script in "package.json"? … yes
     ✔ Choose the test environment that will be used for testing › node
     ✔ Do you want Jest to add coverage reports? … yes
     ✔ Automatically clear mock calls and instances between every test? … no

   Editar arquivo de setup jest.config.js:
   module.exports = {
       collectCoverageFrom: ['<rootDir>/src/**/*.ts'],
       coverageDirectory: 'coverage',
       roots: ['<rootDir>/src'],
       testEnvironment: 'node',
       transform: {
         '.+\\.ts$': 'ts-jest'
       }
   }

   Adicionar entrada em .lintstagedrc.json:
     "npm run test:staged"
   No package.json, adcionar a entrada test:staged:
     "scripts": {
       "test": "jest",
       "test:staged": "jest"
     },

   jest = mocha + chai + instabul
   (roda os testes, faz os asserts, tem o coverage, fácil de configurar, boa documentação)

   Testando se o jest está ativo no projeto:
   ------------------------------------------
   1. criar o arquivo em src/controller.spec.ts, com o seguinte conteúdo:
      describe('Description', () => {
        it('Test', () => {
          expect(1).toBe(1)
        })
      })
   2. rodar no shell npm test (executa o script definido no package.json)
