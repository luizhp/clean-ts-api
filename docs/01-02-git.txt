git config --list
git config --system --list
git config --global --list
git config --local --list

//################################################
//setar o VSCODE como editor padrão do git
  1. git config --global core.editor code
  2. git config --global --edit
  3. acrescentar --wait ao final da entrada "editor" => code --wait
//ou setar o GEDIT como editor padrão do git
  git config --global core.editor gedit
//################################################

//Incluir atalhos
1. git config --edit
2. adicionar seção [alias]
3. na seção, incluir a entrada:

   s = !git status -s
       (-s => retorna compacto)

   c = !git add --all && git commit -m
       (add e commita)

   l = !git log --oneline
   l = !git log --pretty=format:'%h %d [%cn, %cr] %s'
   l = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
   l = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(bold blue)<%an> %C(green)%cr%Creset %C(bold)%s' --abbrev-commit --date=relative
   l = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(green)[%cd...%cr]%Creset %C(bold blue)<%an> %n%C(bold)%s%n' --abbrev-commit --date=iso-local
       (git log compacto)

4. gravar e retornar à linha de comando
5. no prompt entrar com um dos seguintes comandos:
   git s (obter git status compacto)
   git c "nome do commit" (git add e git commit)
   git l
-----------
   
Git Pretty Formats:
https://git-scm.com/docs/pretty-formats
