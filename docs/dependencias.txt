***********************************************
Se√ß√£o 1, Aula 4 - Configurando as depend√™ncias:

npm init -y
-y => configura√ß√µes default

1) Padroniza√ß√£o de commits:

https://www.conventionalcommits.org
A especifica√ß√£o do Conventional Commits √© uma conven√ß√£o simples para utilizar nas mensagens de commit.
Ela define um conjunto de regras para criar um hist√≥rico de commit expl√≠cito, o que facilita a cria√ß√£o de ferramentas automatizadas.

https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines
We have very precise rules over how our git commit messages can be formatted.
This leads to more readable messages that are easy to follow when looking through the project history.
But also, we use the git commit messages to generate the Angular change log.

Biblioteca para for√ßar que a conven√ß√£o do texto no commit seja seguido:
   https://www.npmjs.com/package/git-commit-msg-linter
   A git "commit-msg" hook for linting your git commit message against the Angular Commit Message Guidelines.
   As a hook it will run at every commiting to make sure that the message to commit is valid against the conventions. 

   Inserir biblioteca:
      npm i -D git-commit-msg-linter

2) typescript @types/node

   Inserir biblioteca:
      npm i -D typescript @types/node

3) criar tsconfig.json

   criar automaticamente com tsc --init
   "outDir": "./dist"
   "module": "commonjs"
   "target": "es2020"
   "esModuleInterop": true
   "allowJs": true

   Suporte do node para recursos de cada vers√£o do ECMASCRIPT (vide target)
   https://node.green/

4) linter

   Apresenta√ß√£o da p√°gina - Defini√ß√£o de padr√µes JS
   https://standardjs.com/

   https://github.com/standard/eslint-config-standard-with-typescript
   https://www.npmjs.com/package/eslint-config-standard-with-typescript

   Instalar plugins typescript+eslint+standard:
   npm install --save-dev eslint@6 eslint-plugin-standard@4 eslint-plugin-promise@4 eslint-plugin-import@2 eslint-plugin-node@11 @typescript-eslint/eslint-plugin@2 eslint-config-standard-with-typescript

   habilitar no VSCODE: VS Code ESLint extension
   https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
   (plugin do standardjs serve para projetos somente em js - caso tenha plugin standardjs desabilitar e deixar somente o eslint)

   criar o arquivo .eslintrc.json na pasta raiz e adicionar:
   {
       "extends": "standard-with-typescript",
       "parserOptions": {
           "project": "./tsconfig.json"
       }
   }

   Para testar se est√° ativo a checagem do eslint,
   foi criado um arquivo tempor√°rio
   test.ts com o seguinte conte√∫do:
   
   function teste() {
       return 1;
   }

   e depois de alguns ajustes acabou se tornando:
   
   function teste (): number {
     return 1
   }

   teste()

   provando assim que a checagem estava ativa

   . Criado o arquivo .eslintignore com as pastas para que o eslint ignore
     docs
     node_modules
     dist

-------------------------------------------------
-- Valida√ß√£o de modifica√ß√µes antes de commit/push
   lint-staged + husky

5) lint-staged
   Run linters against staged git files and don't let üí© slip into your code base!
   https://www.npmjs.com/package/lint-staged

   Roda junto com o husky para acelerar o processo de valida√ß√£o.
   Permite que rode scripts somente para arquivos que est√£o na √°rea de stage do git
   (somente os que foram modificados e passaram pelo git add)
   Para n√£o ter que rodar em todos os arquivos do projeto. Somente os que foram modificados e est√£o na stage.

   Instalar:
   npm i -D lint-staged

   Configurar criando arquivo na pasta raiz .lintstagedrc.json e adicionar:
   {
     "*.ts": [
       "eslint 'src/**' --fix",
       "npm run test:staged" (>> adicionar depois de instalar o jest)
     ]
   }

6) husky
   Husky can prevent bad git commit, git push and more üê∂ woof!
   https://www.npmjs.com/package/husky

   Previne que commits ou pushs sejam feitos ao executar comandos de valida√ß√£o do c√≥digo.

   Instalar:
   npm i -D husky

   Configurar criando arquivo na raiz .huskyrc.json e adicionar:
   {
     "hooks": {
       "pre-commit": "lint-staged"
     }
   }

-------------------------------------------------
7) Jest
   Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
   Teste unit√°rio

   https://www.npmjs.com/package/jest
   https://jestjs.io/

   Instalar:
   npm i -D jest @types/jest ts-jest

   Setup (no shell):
   > sudo npm i -g jest
   > jest --init
     ‚úî Would you like to use Jest when running "test" script in "package.json"? ‚Ä¶ yes
     ‚úî Choose the test environment that will be used for testing ‚Ä∫ node
     ‚úî Do you want Jest to add coverage reports? ‚Ä¶ yes
     ‚úî Automatically clear mock calls and instances between every test? ‚Ä¶ no

   Editar arquivo de setup jest.config.js:
   module.exports = {
       collectCoverageFrom: ['<rootDir>/src/**/*.ts'],
       coverageDirectory: 'coverage',
       roots: ['<rootDir>/src'],
       testEnvironment: 'node',
       transform: {
         '.+\\.ts$': 'ts-jest'
       }
   }

   Adicionar entrada em .lintstagedrc.json:
     "npm run test:staged"
   No package.json, adcionar a entrada test:staged:
     "scripts": {
       "test": "jest --passWithNoTests --watch",
       "test:staged": "jest --passWithNoTests"
     },

   jest = mocha + chai + instabul
   (roda os testes, faz os asserts, tem o coverage, f√°cil de configurar, boa documenta√ß√£o)

   Testando se o jest est√° ativo no projeto:
   ------------------------------------------
   1. criar o arquivo em src/controller.spec.ts, com o seguinte conte√∫do:
      describe('Description', () => {
        it('Test', () => {
          expect(1).toBe(1)
        })
      })
   2. rodar no shell npm test (executa o script definido no package.json)


***********************************************
Se√ß√£o 5, Aula 14 - Criando o EmailValidatorAdapter e mockando o validator

1) Instalando a biblioteca Validator

   https://www.npmjs.com/package/validator
   A library of string validators and sanitizers.

   npm install --save validator
   npm install -D @types/validator

***********************************************
Se√ß√£o 7, Aula 17 - Criando o BcryptAdapter e mockando o bcrypt

1) Bcrypt
   https://www.npmjs.com/package/bcrypt

   npm install --save bcrypt
   npm install -D @types/bcrypt

***********************************************
Se√ß√£o 7, Aula 18 - Configurando MongoDb em mem√≥ria

1) jest-mongodb
   https://jestjs.io/docs/en/mongodb
   https://github.com/shelfio/jest-mongodb
   https://www.npmjs.com/package/@shelf/jest-mongodb

   npm install -D @shelf/jest-mongodb @types/mongodb

2) mongodb
   https://www.mongodb.com/
   https://github.com/mongodb/node-mongodb-native
   https://www.npmjs.com/package/mongodb

   npm install --save mongodb

***********************************************
Se√ß√£o 8, Aula 20 - Testando middlewares do express

1) express
   https://www.npmjs.com/package/express
   http://expressjs.com/
   https://github.com/expressjs/express

   npm install --save express

   npm install -D @types/express

2) sucrase
   Sucrase is an alternative to Babel that allows super-fast development builds.
   Instead of compiling a large range of JS features to be able to work in Internet Explorer,
   Sucrase assumes that you're developing with a recent browser or recent Node.js version,
   so it focuses on compiling non-standard language extensions: JSX, TypeScript, and Flow.
   Because of this smaller scope, Sucrase can get away with an architecture that is much
   more performant but less extensible and maintainable. Sucrase's parser is forked from
   Babel's parser (so Sucrase is indebted to Babel and wouldn't be possible without it)
   and trims it down to a focused subset of what Babel solves.
   If it fits your use case, hopefully Sucrase can speed up your development experience!
   https://sucrase.io/
   https://github.com/alangpierce/sucrase
   https://www.npmjs.com/package/sucrase

   npm install -D sucrase

   ser√° desinstalado na Se√ß√£o 15, Aula 45 - Organizando as imagens e containers com Docker Compose

3) supertest
   Emular requisi√ß√£o HTTP
   https://www.npmjs.com/package/supertest
   https://github.com/visionmedia/supertest#readme

   npm install -D supertest @types/supertest

***********************************************
Se√ß√£o 8, Aula 21 - Criando teste de integra√ß√£o para o SignUp

1) fast-glob
   This package provides methods for travel across the file system and returning pathnames that matched a defined
   set of a specified pattern according to the rules used by the Unix Bash shell with some simplifications,
   meanwhile results are returned in arbitrary order.
   https://www.npmjs.com/package/fast-glob
   https://github.com/mrmlnc/fast-glob#readme
   https://github.com/mrmlnc/fast-glob

   npm install --save fast-glob

***********************************************
Se√ß√£o 13, Aula 39 - Criando o JwtAdapter e mockando com o jsonwebtoken

1) jsonwebtoken
   https://www.npmjs.com/package/jsonwebtoken
   https://github.com/auth0/node-jsonwebtoken#readme
   https://github.com/auth0/node-jsonwebtoken

   npm install --save jsonwebtoken
   npm install -D @types/jsonwebtoken

***********************************************
Se√ß√£o 15, Aula 43 - Subindo a API para o Heroku

1) rimraf
   https://www.npmjs.com/package/rimraf
   https://github.com/isaacs/rimraf#readme
   https://github.com/isaacs/rimraf

   npm install -D rimraf

   Neste projeto, utilizado para remover a pasta dist antes que seja gerada uma nova
   Ele √© chamado no script do build: "rimraf dist && tsc"

2) heroku

   Criar conta,
   criar app,
   baixar client
      https://devcenter.heroku.com/articles/heroku-cli

      sudo snap install --classic heroku

   associar

      heroku login -i (autentica√ß√£o via linha de comando)
      heroku login    (autentica√ß√£o via browser)
        vai pedir para apertar enter e abrir p√°gina no browser para confirmar acesso
        confirmado, fechar aba e voltar para a linha de comando

   adicionar remoto do git:heroku ao reposit√≥rio git existente

      heroku git:remote -a <<nome-app-criada-no-heroku>>

   (renomear o nome do remoto do heroku para identificar se √© produ√ß√£o, homolog, etc...)

      git remote rename heroku p
      ou
      git remote rename heroku h

   enviar para heroku...

      git push p master

      verificar deploy no site do heroku:
      op√ß√£o MORE -> VIEW LOGS (ALL PROCESSES e depois tem o WEB)

   setups

      poss√≠vel configurar as vari√°veis de ambiente em SETTINGS -> CONFIG VARS
      
      adicionar mongo em add-ons:
         mLab MongoDB, add-on free

         gera uri de conex√£o em SETTINGS -> CONFIG VARS
          MONGODB_URI
            mongodb://dbuser:dbpass@host:port/dbname

         sobre:
           https://devcenter.heroku.com/articles/mongolab
         configurar acesso remoto com robo3t
           https://yellowme.gitbooks.io/playbook/content/developing/guides/database/configure-a-mlab-database-to-robo-3trobomongo.html

    A url da api fica em SETTINGS e podemos utilizar dentro do postman para testes da api

***********************************************
Se√ß√£o 15, Aula 44 - Gerando uma imagem da API com Docker

1) docker

     node
       https://hub.docker.com/_/node

       Arquivo Dockerfile
       1. FROM node:12
          determina o node vers√£o 12 como imagem a ser utilizada
          caso surjam upgrades/release de vers√£o 12.x.x, esta imagem ser√°
          atualizada obedecendo o limite da vers√£o 12
       
       2. WORKDIR /usr/src/clean-node-api
          define qual √© a pasta dentro do container a ser utilizada para os passos a seguir

       3. COPY ./package.json .
          copia da origem na m√°quina local o arquivo package.json
          e o destino √© a pasta atual no container (passo 2)

       4. RUN npm install --only=prod
          roda o comando npm install determinando que somente os pacotes de produ√ß√£o definidos
          no arquivos package.json sejam instalados

       5. COPY ./dist ./dist
          copia a pasta ./dist da m√°quina local para a pasta atual do container (definida no passo 2)

       6. EXPOSE 5000
          abre a porta 5000 do container para acesso externo

       7. CMD npm start
          executa o comando npm start hospedado no container

    antes de fazer o build do Dockerfile, verificar se h√° algum container criado, fazendo a remo√ß√£o:
      docker container rm clean-node-api

    build do Dockerfile:
      docker build -t clean-node-api .

    execu√ß√£o da imagem com shell
      docker run -it clean-node-api sh

    execu√ß√£o da imagem
      docker run -p 5000:5000 clean-node-api

    (continua com a configura√ß√£o do mongo - Se√ß√£o 15, Aula 45 - Organizando as imagens e containers com Docker Compose)

Se√ß√£o 15, Aula 45 - Organizando as imagens e containers com Docker Compose

1) Docker compose - docker-compose.yml

   Simplificar a manipula√ß√£o dos containers

   mongo
      https://hub.docker.com/_/mongo

      Arquivo docker-compose.yml
        01. version: "3"
            vers√£o do arquivo yml
        02. services:
            servi√ßos a serem disponibilizados
        03.   mongo:
            nome do servi√ßo (usado pelo dns interno do docker)
        04.     container_name: mongo-container
            nome do container
        05.     image: mongo:3
            imagem a ser baixada
        06.     restart: always
            quando crashar, sempre restartar
        07.     volumes:
            volumes a serem utilizados pelo container
        08.       - ./data:/data/db
            origem local / destino no container
        09.     ports:
            portas habilitadas
        10.       - "27017:27017"
            porta interna / porta exposta
        11.   api:
            nome do servi√ßo (usado pelo dns interno do docker)
        12.     container_name: api-container
            nome do container
        13.     build: .
            local do arquivo Dockerfile
        14.     image: clean-node-api
            turnaround do docker, onde se informa a tag
            (seria o par√¢metro -t => docker build -t clean-node-api .)
        15.     restart: always
            quando crashar, sempre restartar
        16.     command: npm start
            comando a executar depois do build
        17.     volumes:
            volumes a serem utilizados pelo container
        18.       - ./dist:/usr/src/clean-node-api/dist
                  - ./package.json:/usr/src/clean-node-api/package.json  (adicionado na aula 46 - Debugando API com breakpoint)
            origem local / destino no container
        19.     ports:
            portas habilitadas
        20.       - "5050:5050"
            porta interna / porta exposta
        21.     links:
            quais containers este container enxerga
        22.       - mongo
            nome do container que este container enxerga

      com estas altera√ß√µes o arquivo Dockerfile, pode ser reduzido para:
        01. FROM node:12
        02. WORKDIR /usr/src/clean-node-api
        03. COPY ./package.json .
        04. RUN npm install --only=prod

   Seguindo os passos:
     1. remo√ß√£o da depend√™ncia do sucrase no package.json e do script dev
        "dev": "sucrase-node src/main/server.ts",
     2. inclus√£o do script up para rodar containerizado e em background
        "up": "npm run build && docker-compose up -d"
     3. inclus√£o do script stop que finaliza a execu√ß√£o
        "down": "docker-compose down"

   Resumo:
     1. npm run build
     2. fazer limpeza de containers e imagens j√° existentes do clean-node-api
     3. DOCKER Compose
        
        executar em foreground:
          docker-compose up
        parar:
          Ctrl-C

        executar em background:
          docker-compose up -d
        parar quando em background:
          docker-compose down

***********************************************
Se√ß√£o 15, Aula 47 - Usando Nodemon no Docker com Typescript

1) Nodemon
   nodemon is a tool that helps develop node.js based applications by automatically
   restarting the node application when file changes in the directory are detected.
   https://www.npmjs.com/package/nodemon
   https://nodemon.io/
   https://github.com/remy/nodemon
   
   npm install --save nodemon

Se√ß√£o 19: B√¥nus, Aula 62 - Continuous Integration & Continuous Delivery

     https://travis-ci.org/
     https://coveralls.io/

1) coveralls.io

   npm install -D coveralls

   arquivo package.json, adicionar script:
     "test:coveralls": "npm run test:ci && coveralls < coverage/lcov.info"

2) travis-ci

   criar arquivo .travis.yml, adicionar. modelo link: https://docs.travis-ci.com/user/languages/javascript-with-nodejs/
     language: node_js
     node_js:
       - 12
     script:
       - eslint 'src/**'
       - npm run test:coveralls

***********************************************
Se√ß√£o 20: LoadSurveys API, Aula 63 - Criando o LoadSurveysController

 1) mockdate
    A JavaScript Mock Date object that can be used to change when "now" is.
    https://www.npmjs.com/package/mockdate
    https://github.com/boblauer/MockDate
    https://github.com/boblauer/MockDate

    npm install -D mockdate

***********************************************
Se√ß√£o 21: B√¥nus, Aula 67 - Modularizando os paths dos imports

 1) module-alias
    Create aliases of directories and register custom module paths in NodeJS like a boss!
    https://www.npmjs.com/package/module-alias
    https://github.com/ilearnio/module-alias

    npm install --save module-alias
